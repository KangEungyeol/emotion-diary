import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import './RecordDetail.css'; // Í∏∞Ï°¥ Ïä§ÌÉÄÏùº Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•

const RecordEdit = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();

    const [record, setRecord] = useState<any>(null);
    const [sliderValue, setSliderValue] = useState(5);
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');

    // Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞
    useEffect(() => {
        const fetchRecord = async () => {
            const { data, error } = await supabase
                .from('emotion_records')
                .select('*')
                .eq('id', id)
                .single();

            if (error) {
                console.error('Supabase fetch Ïò§Î•ò:', error);
            } else {
                setRecord(data);
                setSliderValue(Math.abs(data.value)); // Î∂ÄÌò∏ Ï†úÍ±∞ ÌõÑ Í∞í ÌëúÏãú
                setTitle(data.title);
                setContent(data.content);
            }
        };

        fetchRecord();
    }, [id]);

    const handleSave = async () => {
        if (!record) return;

        const negativeEmotions = ['üòî', 'üò≠', 'üò°', 'üòë', 'üòÆ‚Äçüí®'];
        const emotionValue = negativeEmotions.includes(record.emoji) ? -sliderValue : sliderValue;

        const { error } = await supabase
            .from('emotion_records')
            .update({
                value: emotionValue,
                title,
                content,
            })
            .eq('id', id);

        if (error) {
            console.error('Supabase ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
            alert('ÏàòÏ†ï Ïã§Ìå®!');
        } else {
            alert('ÏàòÏ†ï ÏôÑÎ£å!');
            navigate(`/record-detail/${id}`); // ÏàòÏ†ï ÌõÑ Îã§Ïãú ÏÉÅÏÑ∏Î≥¥Í∏∞Î°ú
        }
    };

    const handleBackClick = () => {
        navigate(-1);
    };

    if (!record) return <p>Î°úÎî© Ï§ë...</p>;

    return (
        <div className="record-detail-container">
            <div className="record-detail-header">
                <button className="back-button" onClick={handleBackClick}>
                    {'‚á¶'}
                </button>
            </div>

            <div className="record-detail-content">
                <div className="emoji" style={{ fontSize: '64px' }}>{record.emoji}</div>
                <div className="date">{record.date}</div>

                <div className="slider-container">
                    <span className="slider-label">0</span>
                    <input
                        type="range"
                        min="0"
                        max="10"
                        value={sliderValue}
                        onChange={(e) => setSliderValue(Number(e.target.value))}
                        className="slider"
                    />
                    <span className="slider-label">10</span>
                </div>

                <input
                    type="text"
                    className="title-input"
                    placeholder="Ï†úÎ™© ÏûÖÎ†•ÌïòÍ∏∞"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                />

                <textarea
                    className="content-input"
                    placeholder="Ïò§Îäò ÌïòÎ£® Í∏∞Î°ùÌïòÍ∏∞"
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                />

                <div className="record-detail-footer">
                    <button className="save-button" onClick={handleSave}>‚úîÔ∏è Ï†ÄÏû•</button>
                </div>
            </div>
        </div>
    );
};

export default RecordEdit;
